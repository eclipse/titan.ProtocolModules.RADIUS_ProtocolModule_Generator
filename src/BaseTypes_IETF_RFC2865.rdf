/******************************************************************************
* Copyright (c) 2008, 2015  Ericsson AB
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v2.0
* which accompanies this distribution, and is available at
* https://www.eclipse.org/org/documents/epl-2.0/EPL-2.0.html
*
* Contributors:
* Timea Moder
* Endre Kulcsar
* Gabor Szalai
* Janos Kovesdi
* Kulcsár Endre
* Zoltan Medve
* Tamas Korosi
******************************************************************************/

//
//  File:               BaseTypes_IETF_RFC2865.rdf
//  Rev:                <RnXnn>
//  Prodnr:             CNL 113 600
//  Reference:          RFC 2865(RADIUS)       
//                       
//                      
//


//
// External functions for encoding and decoding
//

external function f_RADIUS_Enc(in PDU_RADIUS pdu) return octetstring;
external function f_RADIUS_Dec(in octetstring stream) return PDU_RADIUS;

external function f_calc_MD5(in octetstring input) return octetstring;
external function f_crypt_password(in octetstring P,in octetstring req_auth,in octetstring salt,in boolean decrypt,in charstring secret) return octetstring;
external function f_crypt_s_key(in octetstring s_key,in octetstring req_auth,in charstring secret, in boolean decrypt)return octetstring;
external function f_crypt_tunnel_password(in octetstring tunnel_password,in octetstring req_auth,in octetstring salt,in charstring secret, in boolean decrypt)return octetstring;

external function f_salt_value(inout vendor_specific_value pdu, in octetstring req_auth, in charstring secret, in boolean decrypt) return boolean;
external function f_convert_string_to_text(inout vendor_specific_value pdu) return boolean;
//
// Basic type definitions
//

type integer UINT8 (0..255) with {
variant "FIELDLENGTH(8)"
variant "BYTEORDER(last)"
}

type integer UINT16 (0..65535) with {
variant "FIELDLENGTH(16)"
variant "BYTEORDER(last)"
}

type integer UINT24 (0..16777215) with {
variant "FIELDLENGTH(24)"
variant "BYTEORDER(last)"
}

type integer UINT32 (0..4294967296) with {
variant "FIELDLENGTH(32)"
variant "BYTEORDER(last)"
}

type integer UINT64 with {
variant "FIELDLENGTH(64)"
variant "BYTEORDER(last)"
}

type integer INT32 with {
variant "FIELDLENGTH(32)"
variant "BYTEORDER(last)"
variant "COMP(2scompl)"
}

type octetstring OCTET1 length(1) 
type octetstring OCTET2 length(2) 
type octetstring OCTET3 length(3)
type octetstring OCTET4 length(4)
type octetstring OCTET8 length(8)
type octetstring OCTET16 length(16)

//
//  Basic Attribute Data Formats
//

type charstring Attrib_Text length(1..253) with { variant "PADDING(yes)"};
type octetstring Attrib_String length(1..253);
type OCTET4 Attrib_Address;
type OCTET4 Attrib_Time;
type UINT32 Attrib_Value;

//
// Basic vendor specific value types
//

type union vendor_specific_value{
  octetstring string_val,
  charstring text_val,
  UINT32 integer_val,
  UINT64 integer64_val,
  unsalted_value_integer_t  unsalted_integer,
  unsalted_value_text_t  unsalted_text,
  unsalted_value_string_t  unsalted_string,
  tagged_value_integer_t    tagged_integer,
  tagged_value_text_t    tagged_text,
  tagged_value_string_t    tagged_string
}
 
type record unsalted_value_integer_t{
  octetstring     salt length(2),
  UINT32    unsalted_value
}
type record unsalted_value_text_t{
  octetstring     salt length(2),
  charstring    unsalted_value
}
type record unsalted_value_string_t{
  octetstring     salt length(2),
  octetstring    unsalted_value
}

type record tagged_value_integer_t{
  octetstring     tag length(1),
  UINT32    untagged_value
}
type record tagged_value_string_t{
  octetstring     tag length(1),
  octetstring    untagged_value
}
type record tagged_value_text_t{
  octetstring     tag length(1),
  charstring    untagged_value
}


